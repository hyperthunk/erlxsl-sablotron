Installation Instructions
*************************

Prerequisites
=============

You will need the following software installed in order to run ErlXSL
with the erlxsl-sablotron plugin.

 * A version of Erlang/OTP >= R13B
 * The ErlXSL OTP Application
 * The Sablotron XSLT Engine
 * An ISO/ANSI C99 Standard compatible toolchain (to build from sources).

    Sablotron is being mirrored on github (see the README for details)
just in case you have difficulty locating the official download sites as
I did). Sablotron is also available for download from sourceforce.

Basic Installation
==================

There are currently no binary distributions of ErlXSL or
the Sablotron XSLT plugin, therefore you follow the instructions
to build and install from source.

Building and Installing from Source
====================================

The shell commands `./configure; make; make install' should
configure, build, and install this package.

    The `configure' shell script attempts to find build dependencies in
places that are *common* in many *nix systems, such as /usr/local/
for headers (in the include subdirectory) and libraries (in the lib
subdirectory). You can override these choices on the command line
when invoking `configure'. You can obtain assistance with this phase of
the installation process by running `configure --help' to look at the
various options that are available.

    Once the `configure' script has run (successfully), you may
proceed to build the project sources using the `make' program.
The default task builds the software and does nothing more, therefore
it is sufficient to execute the command `make' without any further
inputs. Make does support setting additional variables during
execution - you should consult the program documentation (e.g. man
pages using `man make') for further details.

    The final phase of the installation is performed by executing the
install command via `make install', which will copy the relevant files
into their target locations (which are set up during the *configure*
stage, or set to sensible defaults).

    You may choose to cache the results of the configuration phase in
order to speed up repeated builds. This feature is controlled with the
`--confcache' option when running `configure' from the command line.

Compilers and Options
=====================

Some systems require unusual options for compilation or linking that the
`configure' script does not know about.  Run `./configure --help' for
details on some of the pertinent environment variables.

Compiling For Multiple Architectures
====================================

TBC

Optional Features
=================

You may specify the location of your ErlXSL installation in one of two
ways. Firstly, you can set an absolute path using the `--with-erlxsl'
option during `configure'. Secondly, if you have exported an environment
variable named `ERLXSL_HOME' then this will be used, but the option
passed to `--with-erlxsl' is given precendence.

    Compilation of this package does not require that the ErlXSL binary
package be installed during the compilation process. This is because
ErlXSL loads the shared object library produced by *this* build process
dynamically at runtime, breaking the dependency between the two. You
do however, need to have the ErlXSL API header file on your system, and
the build process assumed that it is present as part of the ErlXSL
standard OTP application install (which happens to be in a subdirectory
priv/include beneath `ERLXSL_HOME'). You can override this by setting
the `--enable-erlxsl-header-only' option during `configure', in which
case value passed to `--with-erlxsl' (or contents of the `ERLXSL_HOME'
environment variable should point directly to the header file).

    A copy of the ErlXSL API header file can be obtained from github,
at https://github.com/hyperthunk/erlxsl/blob/master/c_src/erlxsl.h (or
on another URI if you're using a specific version).

    The location of the Sablotron XSLT engine library file(s) and headers
is also configurable in this manner, using the `--with-libsablot' and
`--with-sablot-headers' options (which are fairly self explanatory and
expected to contain an absolute path to the relevant directory).

== 64bit Support ==

This feature is disabled by default, but should be enabled if you've built
ErlXSL against a 64bit architecture. Providing your system supports it, you
can enable this feature with the `--enable-64bit' option to `configure'.


